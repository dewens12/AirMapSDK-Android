// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: assets/telemetry.proto

package com.airmap.airmapsdk.models;

public final class Telemetry {
  private Telemetry() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface PositionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:airmap.telemetry.Position)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * UNIX time in Milliseconds
     * </pre>
     *
     * <code>optional uint64 timestamp = 1;</code>
     */
    long getTimestamp();

    /**
     * <pre>
     * The recorded latitude
     * Decimal place requirement: 7 decimal places.
     * </pre>
     *
     * <code>optional double latitude = 2;</code>
     */
    double getLatitude();

    /**
     * <pre>
     * The recorded longitude
     * Decimal place requirement: 7 decimal places.
     * </pre>
     *
     * <code>optional double longitude = 3;</code>
     */
    double getLongitude();

    /**
     * <pre>
     *Altitude above mean sea level (ie. GPS), meters
     * </pre>
     *
     * <code>optional float altitude_agl = 4;</code>
     */
    float getAltitudeAgl();

    /**
     * <pre>
     * Altitude above ground level, meters
     * </pre>
     *
     * <code>optional float altitude_msl = 5;</code>
     */
    float getAltitudeMsl();

    /**
     * <pre>
     * Horizontal Dilution of Precision, in meters
     * </pre>
     *
     * <code>optional float horizontal_accuracy = 6;</code>
     */
    float getHorizontalAccuracy();
  }
  /**
   * Protobuf type {@code airmap.telemetry.Position}
   */
  public  static final class Position extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:airmap.telemetry.Position)
      PositionOrBuilder {
    // Use Position.newBuilder() to construct.
    private Position(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Position() {
      timestamp_ = 0L;
      latitude_ = 0D;
      longitude_ = 0D;
      altitudeAgl_ = 0F;
      altitudeMsl_ = 0F;
      horizontalAccuracy_ = 0F;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Position(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              timestamp_ = input.readUInt64();
              break;
            }
            case 17: {

              latitude_ = input.readDouble();
              break;
            }
            case 25: {

              longitude_ = input.readDouble();
              break;
            }
            case 37: {

              altitudeAgl_ = input.readFloat();
              break;
            }
            case 45: {

              altitudeMsl_ = input.readFloat();
              break;
            }
            case 53: {

              horizontalAccuracy_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.airmap.airmapsdk.models.Telemetry.internal_static_airmap_telemetry_Position_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.airmap.airmapsdk.models.Telemetry.internal_static_airmap_telemetry_Position_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.airmap.airmapsdk.models.Telemetry.Position.class, com.airmap.airmapsdk.models.Telemetry.Position.Builder.class);
    }

    public static final int TIMESTAMP_FIELD_NUMBER = 1;
    private long timestamp_;
    /**
     * <pre>
     * UNIX time in Milliseconds
     * </pre>
     *
     * <code>optional uint64 timestamp = 1;</code>
     */
    public long getTimestamp() {
      return timestamp_;
    }

    public static final int LATITUDE_FIELD_NUMBER = 2;
    private double latitude_;
    /**
     * <pre>
     * The recorded latitude
     * Decimal place requirement: 7 decimal places.
     * </pre>
     *
     * <code>optional double latitude = 2;</code>
     */
    public double getLatitude() {
      return latitude_;
    }

    public static final int LONGITUDE_FIELD_NUMBER = 3;
    private double longitude_;
    /**
     * <pre>
     * The recorded longitude
     * Decimal place requirement: 7 decimal places.
     * </pre>
     *
     * <code>optional double longitude = 3;</code>
     */
    public double getLongitude() {
      return longitude_;
    }

    public static final int ALTITUDE_AGL_FIELD_NUMBER = 4;
    private float altitudeAgl_;
    /**
     * <pre>
     *Altitude above mean sea level (ie. GPS), meters
     * </pre>
     *
     * <code>optional float altitude_agl = 4;</code>
     */
    public float getAltitudeAgl() {
      return altitudeAgl_;
    }

    public static final int ALTITUDE_MSL_FIELD_NUMBER = 5;
    private float altitudeMsl_;
    /**
     * <pre>
     * Altitude above ground level, meters
     * </pre>
     *
     * <code>optional float altitude_msl = 5;</code>
     */
    public float getAltitudeMsl() {
      return altitudeMsl_;
    }

    public static final int HORIZONTAL_ACCURACY_FIELD_NUMBER = 6;
    private float horizontalAccuracy_;
    /**
     * <pre>
     * Horizontal Dilution of Precision, in meters
     * </pre>
     *
     * <code>optional float horizontal_accuracy = 6;</code>
     */
    public float getHorizontalAccuracy() {
      return horizontalAccuracy_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (timestamp_ != 0L) {
        output.writeUInt64(1, timestamp_);
      }
      if (latitude_ != 0D) {
        output.writeDouble(2, latitude_);
      }
      if (longitude_ != 0D) {
        output.writeDouble(3, longitude_);
      }
      if (altitudeAgl_ != 0F) {
        output.writeFloat(4, altitudeAgl_);
      }
      if (altitudeMsl_ != 0F) {
        output.writeFloat(5, altitudeMsl_);
      }
      if (horizontalAccuracy_ != 0F) {
        output.writeFloat(6, horizontalAccuracy_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (timestamp_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, timestamp_);
      }
      if (latitude_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, latitude_);
      }
      if (longitude_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, longitude_);
      }
      if (altitudeAgl_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, altitudeAgl_);
      }
      if (altitudeMsl_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, altitudeMsl_);
      }
      if (horizontalAccuracy_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, horizontalAccuracy_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.airmap.airmapsdk.models.Telemetry.Position)) {
        return super.equals(obj);
      }
      com.airmap.airmapsdk.models.Telemetry.Position other = (com.airmap.airmapsdk.models.Telemetry.Position) obj;

      boolean result = true;
      result = result && (getTimestamp()
          == other.getTimestamp());
      result = result && (
          java.lang.Double.doubleToLongBits(getLatitude())
          == java.lang.Double.doubleToLongBits(
              other.getLatitude()));
      result = result && (
          java.lang.Double.doubleToLongBits(getLongitude())
          == java.lang.Double.doubleToLongBits(
              other.getLongitude()));
      result = result && (
          java.lang.Float.floatToIntBits(getAltitudeAgl())
          == java.lang.Float.floatToIntBits(
              other.getAltitudeAgl()));
      result = result && (
          java.lang.Float.floatToIntBits(getAltitudeMsl())
          == java.lang.Float.floatToIntBits(
              other.getAltitudeMsl()));
      result = result && (
          java.lang.Float.floatToIntBits(getHorizontalAccuracy())
          == java.lang.Float.floatToIntBits(
              other.getHorizontalAccuracy()));
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTimestamp());
      hash = (37 * hash) + LATITUDE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getLatitude()));
      hash = (37 * hash) + LONGITUDE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getLongitude()));
      hash = (37 * hash) + ALTITUDE_AGL_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getAltitudeAgl());
      hash = (37 * hash) + ALTITUDE_MSL_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getAltitudeMsl());
      hash = (37 * hash) + HORIZONTAL_ACCURACY_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getHorizontalAccuracy());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.airmap.airmapsdk.models.Telemetry.Position parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Position parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Position parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Position parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Position parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Position parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Position parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Position parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Position parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Position parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.airmap.airmapsdk.models.Telemetry.Position prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code airmap.telemetry.Position}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:airmap.telemetry.Position)
        com.airmap.airmapsdk.models.Telemetry.PositionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.airmap.airmapsdk.models.Telemetry.internal_static_airmap_telemetry_Position_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.airmap.airmapsdk.models.Telemetry.internal_static_airmap_telemetry_Position_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.airmap.airmapsdk.models.Telemetry.Position.class, com.airmap.airmapsdk.models.Telemetry.Position.Builder.class);
      }

      // Construct using com.airmap.airmapsdk.models.Telemetry.Position.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        timestamp_ = 0L;

        latitude_ = 0D;

        longitude_ = 0D;

        altitudeAgl_ = 0F;

        altitudeMsl_ = 0F;

        horizontalAccuracy_ = 0F;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.airmap.airmapsdk.models.Telemetry.internal_static_airmap_telemetry_Position_descriptor;
      }

      public com.airmap.airmapsdk.models.Telemetry.Position getDefaultInstanceForType() {
        return com.airmap.airmapsdk.models.Telemetry.Position.getDefaultInstance();
      }

      public com.airmap.airmapsdk.models.Telemetry.Position build() {
        com.airmap.airmapsdk.models.Telemetry.Position result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.airmap.airmapsdk.models.Telemetry.Position buildPartial() {
        com.airmap.airmapsdk.models.Telemetry.Position result = new com.airmap.airmapsdk.models.Telemetry.Position(this);
        result.timestamp_ = timestamp_;
        result.latitude_ = latitude_;
        result.longitude_ = longitude_;
        result.altitudeAgl_ = altitudeAgl_;
        result.altitudeMsl_ = altitudeMsl_;
        result.horizontalAccuracy_ = horizontalAccuracy_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.airmap.airmapsdk.models.Telemetry.Position) {
          return mergeFrom((com.airmap.airmapsdk.models.Telemetry.Position)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.airmap.airmapsdk.models.Telemetry.Position other) {
        if (other == com.airmap.airmapsdk.models.Telemetry.Position.getDefaultInstance()) return this;
        if (other.getTimestamp() != 0L) {
          setTimestamp(other.getTimestamp());
        }
        if (other.getLatitude() != 0D) {
          setLatitude(other.getLatitude());
        }
        if (other.getLongitude() != 0D) {
          setLongitude(other.getLongitude());
        }
        if (other.getAltitudeAgl() != 0F) {
          setAltitudeAgl(other.getAltitudeAgl());
        }
        if (other.getAltitudeMsl() != 0F) {
          setAltitudeMsl(other.getAltitudeMsl());
        }
        if (other.getHorizontalAccuracy() != 0F) {
          setHorizontalAccuracy(other.getHorizontalAccuracy());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.airmap.airmapsdk.models.Telemetry.Position parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.airmap.airmapsdk.models.Telemetry.Position) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private long timestamp_ ;
      /**
       * <pre>
       * UNIX time in Milliseconds
       * </pre>
       *
       * <code>optional uint64 timestamp = 1;</code>
       */
      public long getTimestamp() {
        return timestamp_;
      }
      /**
       * <pre>
       * UNIX time in Milliseconds
       * </pre>
       *
       * <code>optional uint64 timestamp = 1;</code>
       */
      public Builder setTimestamp(long value) {
        
        timestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * UNIX time in Milliseconds
       * </pre>
       *
       * <code>optional uint64 timestamp = 1;</code>
       */
      public Builder clearTimestamp() {
        
        timestamp_ = 0L;
        onChanged();
        return this;
      }

      private double latitude_ ;
      /**
       * <pre>
       * The recorded latitude
       * Decimal place requirement: 7 decimal places.
       * </pre>
       *
       * <code>optional double latitude = 2;</code>
       */
      public double getLatitude() {
        return latitude_;
      }
      /**
       * <pre>
       * The recorded latitude
       * Decimal place requirement: 7 decimal places.
       * </pre>
       *
       * <code>optional double latitude = 2;</code>
       */
      public Builder setLatitude(double value) {
        
        latitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The recorded latitude
       * Decimal place requirement: 7 decimal places.
       * </pre>
       *
       * <code>optional double latitude = 2;</code>
       */
      public Builder clearLatitude() {
        
        latitude_ = 0D;
        onChanged();
        return this;
      }

      private double longitude_ ;
      /**
       * <pre>
       * The recorded longitude
       * Decimal place requirement: 7 decimal places.
       * </pre>
       *
       * <code>optional double longitude = 3;</code>
       */
      public double getLongitude() {
        return longitude_;
      }
      /**
       * <pre>
       * The recorded longitude
       * Decimal place requirement: 7 decimal places.
       * </pre>
       *
       * <code>optional double longitude = 3;</code>
       */
      public Builder setLongitude(double value) {
        
        longitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The recorded longitude
       * Decimal place requirement: 7 decimal places.
       * </pre>
       *
       * <code>optional double longitude = 3;</code>
       */
      public Builder clearLongitude() {
        
        longitude_ = 0D;
        onChanged();
        return this;
      }

      private float altitudeAgl_ ;
      /**
       * <pre>
       *Altitude above mean sea level (ie. GPS), meters
       * </pre>
       *
       * <code>optional float altitude_agl = 4;</code>
       */
      public float getAltitudeAgl() {
        return altitudeAgl_;
      }
      /**
       * <pre>
       *Altitude above mean sea level (ie. GPS), meters
       * </pre>
       *
       * <code>optional float altitude_agl = 4;</code>
       */
      public Builder setAltitudeAgl(float value) {
        
        altitudeAgl_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *Altitude above mean sea level (ie. GPS), meters
       * </pre>
       *
       * <code>optional float altitude_agl = 4;</code>
       */
      public Builder clearAltitudeAgl() {
        
        altitudeAgl_ = 0F;
        onChanged();
        return this;
      }

      private float altitudeMsl_ ;
      /**
       * <pre>
       * Altitude above ground level, meters
       * </pre>
       *
       * <code>optional float altitude_msl = 5;</code>
       */
      public float getAltitudeMsl() {
        return altitudeMsl_;
      }
      /**
       * <pre>
       * Altitude above ground level, meters
       * </pre>
       *
       * <code>optional float altitude_msl = 5;</code>
       */
      public Builder setAltitudeMsl(float value) {
        
        altitudeMsl_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Altitude above ground level, meters
       * </pre>
       *
       * <code>optional float altitude_msl = 5;</code>
       */
      public Builder clearAltitudeMsl() {
        
        altitudeMsl_ = 0F;
        onChanged();
        return this;
      }

      private float horizontalAccuracy_ ;
      /**
       * <pre>
       * Horizontal Dilution of Precision, in meters
       * </pre>
       *
       * <code>optional float horizontal_accuracy = 6;</code>
       */
      public float getHorizontalAccuracy() {
        return horizontalAccuracy_;
      }
      /**
       * <pre>
       * Horizontal Dilution of Precision, in meters
       * </pre>
       *
       * <code>optional float horizontal_accuracy = 6;</code>
       */
      public Builder setHorizontalAccuracy(float value) {
        
        horizontalAccuracy_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Horizontal Dilution of Precision, in meters
       * </pre>
       *
       * <code>optional float horizontal_accuracy = 6;</code>
       */
      public Builder clearHorizontalAccuracy() {
        
        horizontalAccuracy_ = 0F;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:airmap.telemetry.Position)
    }

    // @@protoc_insertion_point(class_scope:airmap.telemetry.Position)
    private static final com.airmap.airmapsdk.models.Telemetry.Position DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.airmap.airmapsdk.models.Telemetry.Position();
    }

    public static com.airmap.airmapsdk.models.Telemetry.Position getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Position>
        PARSER = new com.google.protobuf.AbstractParser<Position>() {
      public Position parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Position(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Position> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Position> getParserForType() {
      return PARSER;
    }

    public com.airmap.airmapsdk.models.Telemetry.Position getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface AttitudeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:airmap.telemetry.Attitude)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * UNIX time in Milliseconds
     * </pre>
     *
     * <code>optional uint64 timestamp = 1;</code>
     */
    long getTimestamp();

    /**
     * <pre>
     * Yaw angle measured from True North, { 0 &lt;= x &lt; 360 } degrees
     * </pre>
     *
     * <code>optional float yaw = 2;</code>
     */
    float getYaw();

    /**
     * <pre>
     * Pitch angle, { -180 &lt; x &lt;= 180 } degrees
     * </pre>
     *
     * <code>optional float pitch = 3;</code>
     */
    float getPitch();

    /**
     * <pre>
     * Roll angle, { -180 &lt; x &lt;= 180 } degrees
     * </pre>
     *
     * <code>optional float roll = 4;</code>
     */
    float getRoll();
  }
  /**
   * Protobuf type {@code airmap.telemetry.Attitude}
   */
  public  static final class Attitude extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:airmap.telemetry.Attitude)
      AttitudeOrBuilder {
    // Use Attitude.newBuilder() to construct.
    private Attitude(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Attitude() {
      timestamp_ = 0L;
      yaw_ = 0F;
      pitch_ = 0F;
      roll_ = 0F;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Attitude(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              timestamp_ = input.readUInt64();
              break;
            }
            case 21: {

              yaw_ = input.readFloat();
              break;
            }
            case 29: {

              pitch_ = input.readFloat();
              break;
            }
            case 37: {

              roll_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.airmap.airmapsdk.models.Telemetry.internal_static_airmap_telemetry_Attitude_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.airmap.airmapsdk.models.Telemetry.internal_static_airmap_telemetry_Attitude_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.airmap.airmapsdk.models.Telemetry.Attitude.class, com.airmap.airmapsdk.models.Telemetry.Attitude.Builder.class);
    }

    public static final int TIMESTAMP_FIELD_NUMBER = 1;
    private long timestamp_;
    /**
     * <pre>
     * UNIX time in Milliseconds
     * </pre>
     *
     * <code>optional uint64 timestamp = 1;</code>
     */
    public long getTimestamp() {
      return timestamp_;
    }

    public static final int YAW_FIELD_NUMBER = 2;
    private float yaw_;
    /**
     * <pre>
     * Yaw angle measured from True North, { 0 &lt;= x &lt; 360 } degrees
     * </pre>
     *
     * <code>optional float yaw = 2;</code>
     */
    public float getYaw() {
      return yaw_;
    }

    public static final int PITCH_FIELD_NUMBER = 3;
    private float pitch_;
    /**
     * <pre>
     * Pitch angle, { -180 &lt; x &lt;= 180 } degrees
     * </pre>
     *
     * <code>optional float pitch = 3;</code>
     */
    public float getPitch() {
      return pitch_;
    }

    public static final int ROLL_FIELD_NUMBER = 4;
    private float roll_;
    /**
     * <pre>
     * Roll angle, { -180 &lt; x &lt;= 180 } degrees
     * </pre>
     *
     * <code>optional float roll = 4;</code>
     */
    public float getRoll() {
      return roll_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (timestamp_ != 0L) {
        output.writeUInt64(1, timestamp_);
      }
      if (yaw_ != 0F) {
        output.writeFloat(2, yaw_);
      }
      if (pitch_ != 0F) {
        output.writeFloat(3, pitch_);
      }
      if (roll_ != 0F) {
        output.writeFloat(4, roll_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (timestamp_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, timestamp_);
      }
      if (yaw_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, yaw_);
      }
      if (pitch_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, pitch_);
      }
      if (roll_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, roll_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.airmap.airmapsdk.models.Telemetry.Attitude)) {
        return super.equals(obj);
      }
      com.airmap.airmapsdk.models.Telemetry.Attitude other = (com.airmap.airmapsdk.models.Telemetry.Attitude) obj;

      boolean result = true;
      result = result && (getTimestamp()
          == other.getTimestamp());
      result = result && (
          java.lang.Float.floatToIntBits(getYaw())
          == java.lang.Float.floatToIntBits(
              other.getYaw()));
      result = result && (
          java.lang.Float.floatToIntBits(getPitch())
          == java.lang.Float.floatToIntBits(
              other.getPitch()));
      result = result && (
          java.lang.Float.floatToIntBits(getRoll())
          == java.lang.Float.floatToIntBits(
              other.getRoll()));
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTimestamp());
      hash = (37 * hash) + YAW_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getYaw());
      hash = (37 * hash) + PITCH_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getPitch());
      hash = (37 * hash) + ROLL_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getRoll());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.airmap.airmapsdk.models.Telemetry.Attitude parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Attitude parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Attitude parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Attitude parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Attitude parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Attitude parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Attitude parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Attitude parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Attitude parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Attitude parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.airmap.airmapsdk.models.Telemetry.Attitude prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code airmap.telemetry.Attitude}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:airmap.telemetry.Attitude)
        com.airmap.airmapsdk.models.Telemetry.AttitudeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.airmap.airmapsdk.models.Telemetry.internal_static_airmap_telemetry_Attitude_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.airmap.airmapsdk.models.Telemetry.internal_static_airmap_telemetry_Attitude_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.airmap.airmapsdk.models.Telemetry.Attitude.class, com.airmap.airmapsdk.models.Telemetry.Attitude.Builder.class);
      }

      // Construct using com.airmap.airmapsdk.models.Telemetry.Attitude.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        timestamp_ = 0L;

        yaw_ = 0F;

        pitch_ = 0F;

        roll_ = 0F;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.airmap.airmapsdk.models.Telemetry.internal_static_airmap_telemetry_Attitude_descriptor;
      }

      public com.airmap.airmapsdk.models.Telemetry.Attitude getDefaultInstanceForType() {
        return com.airmap.airmapsdk.models.Telemetry.Attitude.getDefaultInstance();
      }

      public com.airmap.airmapsdk.models.Telemetry.Attitude build() {
        com.airmap.airmapsdk.models.Telemetry.Attitude result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.airmap.airmapsdk.models.Telemetry.Attitude buildPartial() {
        com.airmap.airmapsdk.models.Telemetry.Attitude result = new com.airmap.airmapsdk.models.Telemetry.Attitude(this);
        result.timestamp_ = timestamp_;
        result.yaw_ = yaw_;
        result.pitch_ = pitch_;
        result.roll_ = roll_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.airmap.airmapsdk.models.Telemetry.Attitude) {
          return mergeFrom((com.airmap.airmapsdk.models.Telemetry.Attitude)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.airmap.airmapsdk.models.Telemetry.Attitude other) {
        if (other == com.airmap.airmapsdk.models.Telemetry.Attitude.getDefaultInstance()) return this;
        if (other.getTimestamp() != 0L) {
          setTimestamp(other.getTimestamp());
        }
        if (other.getYaw() != 0F) {
          setYaw(other.getYaw());
        }
        if (other.getPitch() != 0F) {
          setPitch(other.getPitch());
        }
        if (other.getRoll() != 0F) {
          setRoll(other.getRoll());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.airmap.airmapsdk.models.Telemetry.Attitude parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.airmap.airmapsdk.models.Telemetry.Attitude) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private long timestamp_ ;
      /**
       * <pre>
       * UNIX time in Milliseconds
       * </pre>
       *
       * <code>optional uint64 timestamp = 1;</code>
       */
      public long getTimestamp() {
        return timestamp_;
      }
      /**
       * <pre>
       * UNIX time in Milliseconds
       * </pre>
       *
       * <code>optional uint64 timestamp = 1;</code>
       */
      public Builder setTimestamp(long value) {
        
        timestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * UNIX time in Milliseconds
       * </pre>
       *
       * <code>optional uint64 timestamp = 1;</code>
       */
      public Builder clearTimestamp() {
        
        timestamp_ = 0L;
        onChanged();
        return this;
      }

      private float yaw_ ;
      /**
       * <pre>
       * Yaw angle measured from True North, { 0 &lt;= x &lt; 360 } degrees
       * </pre>
       *
       * <code>optional float yaw = 2;</code>
       */
      public float getYaw() {
        return yaw_;
      }
      /**
       * <pre>
       * Yaw angle measured from True North, { 0 &lt;= x &lt; 360 } degrees
       * </pre>
       *
       * <code>optional float yaw = 2;</code>
       */
      public Builder setYaw(float value) {
        
        yaw_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Yaw angle measured from True North, { 0 &lt;= x &lt; 360 } degrees
       * </pre>
       *
       * <code>optional float yaw = 2;</code>
       */
      public Builder clearYaw() {
        
        yaw_ = 0F;
        onChanged();
        return this;
      }

      private float pitch_ ;
      /**
       * <pre>
       * Pitch angle, { -180 &lt; x &lt;= 180 } degrees
       * </pre>
       *
       * <code>optional float pitch = 3;</code>
       */
      public float getPitch() {
        return pitch_;
      }
      /**
       * <pre>
       * Pitch angle, { -180 &lt; x &lt;= 180 } degrees
       * </pre>
       *
       * <code>optional float pitch = 3;</code>
       */
      public Builder setPitch(float value) {
        
        pitch_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Pitch angle, { -180 &lt; x &lt;= 180 } degrees
       * </pre>
       *
       * <code>optional float pitch = 3;</code>
       */
      public Builder clearPitch() {
        
        pitch_ = 0F;
        onChanged();
        return this;
      }

      private float roll_ ;
      /**
       * <pre>
       * Roll angle, { -180 &lt; x &lt;= 180 } degrees
       * </pre>
       *
       * <code>optional float roll = 4;</code>
       */
      public float getRoll() {
        return roll_;
      }
      /**
       * <pre>
       * Roll angle, { -180 &lt; x &lt;= 180 } degrees
       * </pre>
       *
       * <code>optional float roll = 4;</code>
       */
      public Builder setRoll(float value) {
        
        roll_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Roll angle, { -180 &lt; x &lt;= 180 } degrees
       * </pre>
       *
       * <code>optional float roll = 4;</code>
       */
      public Builder clearRoll() {
        
        roll_ = 0F;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:airmap.telemetry.Attitude)
    }

    // @@protoc_insertion_point(class_scope:airmap.telemetry.Attitude)
    private static final com.airmap.airmapsdk.models.Telemetry.Attitude DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.airmap.airmapsdk.models.Telemetry.Attitude();
    }

    public static com.airmap.airmapsdk.models.Telemetry.Attitude getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Attitude>
        PARSER = new com.google.protobuf.AbstractParser<Attitude>() {
      public Attitude parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Attitude(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Attitude> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Attitude> getParserForType() {
      return PARSER;
    }

    public com.airmap.airmapsdk.models.Telemetry.Attitude getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SpeedOrBuilder extends
      // @@protoc_insertion_point(interface_extends:airmap.telemetry.Speed)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * UNIX time in Milliseconds
     * </pre>
     *
     * <code>optional uint64 timestamp = 1;</code>
     */
    long getTimestamp();

    /**
     * <pre>
     * Aircraft Speed in the x direction in meters per second using the North-East-Down (N-E-D) coordinate system
     * </pre>
     *
     * <code>optional float velocity_x = 2;</code>
     */
    float getVelocityX();

    /**
     * <pre>
     * Aircraft Speed in the y direction in meters per second using the North-East-Down (N-E-D) coordinate system
     * </pre>
     *
     * <code>optional float velocity_y = 3;</code>
     */
    float getVelocityY();

    /**
     * <pre>
     * Aircraft Speed in the z direction in meters per second using the North-East-Down (N-E-D) coordinate system
     * </pre>
     *
     * <code>optional float velocity_z = 4;</code>
     */
    float getVelocityZ();
  }
  /**
   * Protobuf type {@code airmap.telemetry.Speed}
   */
  public  static final class Speed extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:airmap.telemetry.Speed)
      SpeedOrBuilder {
    // Use Speed.newBuilder() to construct.
    private Speed(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Speed() {
      timestamp_ = 0L;
      velocityX_ = 0F;
      velocityY_ = 0F;
      velocityZ_ = 0F;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Speed(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              timestamp_ = input.readUInt64();
              break;
            }
            case 21: {

              velocityX_ = input.readFloat();
              break;
            }
            case 29: {

              velocityY_ = input.readFloat();
              break;
            }
            case 37: {

              velocityZ_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.airmap.airmapsdk.models.Telemetry.internal_static_airmap_telemetry_Speed_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.airmap.airmapsdk.models.Telemetry.internal_static_airmap_telemetry_Speed_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.airmap.airmapsdk.models.Telemetry.Speed.class, com.airmap.airmapsdk.models.Telemetry.Speed.Builder.class);
    }

    public static final int TIMESTAMP_FIELD_NUMBER = 1;
    private long timestamp_;
    /**
     * <pre>
     * UNIX time in Milliseconds
     * </pre>
     *
     * <code>optional uint64 timestamp = 1;</code>
     */
    public long getTimestamp() {
      return timestamp_;
    }

    public static final int VELOCITY_X_FIELD_NUMBER = 2;
    private float velocityX_;
    /**
     * <pre>
     * Aircraft Speed in the x direction in meters per second using the North-East-Down (N-E-D) coordinate system
     * </pre>
     *
     * <code>optional float velocity_x = 2;</code>
     */
    public float getVelocityX() {
      return velocityX_;
    }

    public static final int VELOCITY_Y_FIELD_NUMBER = 3;
    private float velocityY_;
    /**
     * <pre>
     * Aircraft Speed in the y direction in meters per second using the North-East-Down (N-E-D) coordinate system
     * </pre>
     *
     * <code>optional float velocity_y = 3;</code>
     */
    public float getVelocityY() {
      return velocityY_;
    }

    public static final int VELOCITY_Z_FIELD_NUMBER = 4;
    private float velocityZ_;
    /**
     * <pre>
     * Aircraft Speed in the z direction in meters per second using the North-East-Down (N-E-D) coordinate system
     * </pre>
     *
     * <code>optional float velocity_z = 4;</code>
     */
    public float getVelocityZ() {
      return velocityZ_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (timestamp_ != 0L) {
        output.writeUInt64(1, timestamp_);
      }
      if (velocityX_ != 0F) {
        output.writeFloat(2, velocityX_);
      }
      if (velocityY_ != 0F) {
        output.writeFloat(3, velocityY_);
      }
      if (velocityZ_ != 0F) {
        output.writeFloat(4, velocityZ_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (timestamp_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, timestamp_);
      }
      if (velocityX_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, velocityX_);
      }
      if (velocityY_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, velocityY_);
      }
      if (velocityZ_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, velocityZ_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.airmap.airmapsdk.models.Telemetry.Speed)) {
        return super.equals(obj);
      }
      com.airmap.airmapsdk.models.Telemetry.Speed other = (com.airmap.airmapsdk.models.Telemetry.Speed) obj;

      boolean result = true;
      result = result && (getTimestamp()
          == other.getTimestamp());
      result = result && (
          java.lang.Float.floatToIntBits(getVelocityX())
          == java.lang.Float.floatToIntBits(
              other.getVelocityX()));
      result = result && (
          java.lang.Float.floatToIntBits(getVelocityY())
          == java.lang.Float.floatToIntBits(
              other.getVelocityY()));
      result = result && (
          java.lang.Float.floatToIntBits(getVelocityZ())
          == java.lang.Float.floatToIntBits(
              other.getVelocityZ()));
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTimestamp());
      hash = (37 * hash) + VELOCITY_X_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getVelocityX());
      hash = (37 * hash) + VELOCITY_Y_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getVelocityY());
      hash = (37 * hash) + VELOCITY_Z_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getVelocityZ());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.airmap.airmapsdk.models.Telemetry.Speed parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Speed parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Speed parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Speed parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Speed parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Speed parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Speed parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Speed parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Speed parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Speed parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.airmap.airmapsdk.models.Telemetry.Speed prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code airmap.telemetry.Speed}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:airmap.telemetry.Speed)
        com.airmap.airmapsdk.models.Telemetry.SpeedOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.airmap.airmapsdk.models.Telemetry.internal_static_airmap_telemetry_Speed_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.airmap.airmapsdk.models.Telemetry.internal_static_airmap_telemetry_Speed_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.airmap.airmapsdk.models.Telemetry.Speed.class, com.airmap.airmapsdk.models.Telemetry.Speed.Builder.class);
      }

      // Construct using com.airmap.airmapsdk.models.Telemetry.Speed.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        timestamp_ = 0L;

        velocityX_ = 0F;

        velocityY_ = 0F;

        velocityZ_ = 0F;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.airmap.airmapsdk.models.Telemetry.internal_static_airmap_telemetry_Speed_descriptor;
      }

      public com.airmap.airmapsdk.models.Telemetry.Speed getDefaultInstanceForType() {
        return com.airmap.airmapsdk.models.Telemetry.Speed.getDefaultInstance();
      }

      public com.airmap.airmapsdk.models.Telemetry.Speed build() {
        com.airmap.airmapsdk.models.Telemetry.Speed result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.airmap.airmapsdk.models.Telemetry.Speed buildPartial() {
        com.airmap.airmapsdk.models.Telemetry.Speed result = new com.airmap.airmapsdk.models.Telemetry.Speed(this);
        result.timestamp_ = timestamp_;
        result.velocityX_ = velocityX_;
        result.velocityY_ = velocityY_;
        result.velocityZ_ = velocityZ_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.airmap.airmapsdk.models.Telemetry.Speed) {
          return mergeFrom((com.airmap.airmapsdk.models.Telemetry.Speed)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.airmap.airmapsdk.models.Telemetry.Speed other) {
        if (other == com.airmap.airmapsdk.models.Telemetry.Speed.getDefaultInstance()) return this;
        if (other.getTimestamp() != 0L) {
          setTimestamp(other.getTimestamp());
        }
        if (other.getVelocityX() != 0F) {
          setVelocityX(other.getVelocityX());
        }
        if (other.getVelocityY() != 0F) {
          setVelocityY(other.getVelocityY());
        }
        if (other.getVelocityZ() != 0F) {
          setVelocityZ(other.getVelocityZ());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.airmap.airmapsdk.models.Telemetry.Speed parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.airmap.airmapsdk.models.Telemetry.Speed) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private long timestamp_ ;
      /**
       * <pre>
       * UNIX time in Milliseconds
       * </pre>
       *
       * <code>optional uint64 timestamp = 1;</code>
       */
      public long getTimestamp() {
        return timestamp_;
      }
      /**
       * <pre>
       * UNIX time in Milliseconds
       * </pre>
       *
       * <code>optional uint64 timestamp = 1;</code>
       */
      public Builder setTimestamp(long value) {
        
        timestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * UNIX time in Milliseconds
       * </pre>
       *
       * <code>optional uint64 timestamp = 1;</code>
       */
      public Builder clearTimestamp() {
        
        timestamp_ = 0L;
        onChanged();
        return this;
      }

      private float velocityX_ ;
      /**
       * <pre>
       * Aircraft Speed in the x direction in meters per second using the North-East-Down (N-E-D) coordinate system
       * </pre>
       *
       * <code>optional float velocity_x = 2;</code>
       */
      public float getVelocityX() {
        return velocityX_;
      }
      /**
       * <pre>
       * Aircraft Speed in the x direction in meters per second using the North-East-Down (N-E-D) coordinate system
       * </pre>
       *
       * <code>optional float velocity_x = 2;</code>
       */
      public Builder setVelocityX(float value) {
        
        velocityX_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Aircraft Speed in the x direction in meters per second using the North-East-Down (N-E-D) coordinate system
       * </pre>
       *
       * <code>optional float velocity_x = 2;</code>
       */
      public Builder clearVelocityX() {
        
        velocityX_ = 0F;
        onChanged();
        return this;
      }

      private float velocityY_ ;
      /**
       * <pre>
       * Aircraft Speed in the y direction in meters per second using the North-East-Down (N-E-D) coordinate system
       * </pre>
       *
       * <code>optional float velocity_y = 3;</code>
       */
      public float getVelocityY() {
        return velocityY_;
      }
      /**
       * <pre>
       * Aircraft Speed in the y direction in meters per second using the North-East-Down (N-E-D) coordinate system
       * </pre>
       *
       * <code>optional float velocity_y = 3;</code>
       */
      public Builder setVelocityY(float value) {
        
        velocityY_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Aircraft Speed in the y direction in meters per second using the North-East-Down (N-E-D) coordinate system
       * </pre>
       *
       * <code>optional float velocity_y = 3;</code>
       */
      public Builder clearVelocityY() {
        
        velocityY_ = 0F;
        onChanged();
        return this;
      }

      private float velocityZ_ ;
      /**
       * <pre>
       * Aircraft Speed in the z direction in meters per second using the North-East-Down (N-E-D) coordinate system
       * </pre>
       *
       * <code>optional float velocity_z = 4;</code>
       */
      public float getVelocityZ() {
        return velocityZ_;
      }
      /**
       * <pre>
       * Aircraft Speed in the z direction in meters per second using the North-East-Down (N-E-D) coordinate system
       * </pre>
       *
       * <code>optional float velocity_z = 4;</code>
       */
      public Builder setVelocityZ(float value) {
        
        velocityZ_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Aircraft Speed in the z direction in meters per second using the North-East-Down (N-E-D) coordinate system
       * </pre>
       *
       * <code>optional float velocity_z = 4;</code>
       */
      public Builder clearVelocityZ() {
        
        velocityZ_ = 0F;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:airmap.telemetry.Speed)
    }

    // @@protoc_insertion_point(class_scope:airmap.telemetry.Speed)
    private static final com.airmap.airmapsdk.models.Telemetry.Speed DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.airmap.airmapsdk.models.Telemetry.Speed();
    }

    public static com.airmap.airmapsdk.models.Telemetry.Speed getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Speed>
        PARSER = new com.google.protobuf.AbstractParser<Speed>() {
      public Speed parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Speed(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Speed> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Speed> getParserForType() {
      return PARSER;
    }

    public com.airmap.airmapsdk.models.Telemetry.Speed getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BarometerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:airmap.telemetry.Barometer)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * UNIX time in Milliseconds
     * </pre>
     *
     * <code>optional uint64 timestamp = 1;</code>
     */
    long getTimestamp();

    /**
     * <pre>
     * Barometric pressure in hPa
     * </pre>
     *
     * <code>optional float pressure = 2;</code>
     */
    float getPressure();
  }
  /**
   * Protobuf type {@code airmap.telemetry.Barometer}
   */
  public  static final class Barometer extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:airmap.telemetry.Barometer)
      BarometerOrBuilder {
    // Use Barometer.newBuilder() to construct.
    private Barometer(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Barometer() {
      timestamp_ = 0L;
      pressure_ = 0F;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Barometer(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              timestamp_ = input.readUInt64();
              break;
            }
            case 21: {

              pressure_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.airmap.airmapsdk.models.Telemetry.internal_static_airmap_telemetry_Barometer_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.airmap.airmapsdk.models.Telemetry.internal_static_airmap_telemetry_Barometer_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.airmap.airmapsdk.models.Telemetry.Barometer.class, com.airmap.airmapsdk.models.Telemetry.Barometer.Builder.class);
    }

    public static final int TIMESTAMP_FIELD_NUMBER = 1;
    private long timestamp_;
    /**
     * <pre>
     * UNIX time in Milliseconds
     * </pre>
     *
     * <code>optional uint64 timestamp = 1;</code>
     */
    public long getTimestamp() {
      return timestamp_;
    }

    public static final int PRESSURE_FIELD_NUMBER = 2;
    private float pressure_;
    /**
     * <pre>
     * Barometric pressure in hPa
     * </pre>
     *
     * <code>optional float pressure = 2;</code>
     */
    public float getPressure() {
      return pressure_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (timestamp_ != 0L) {
        output.writeUInt64(1, timestamp_);
      }
      if (pressure_ != 0F) {
        output.writeFloat(2, pressure_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (timestamp_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, timestamp_);
      }
      if (pressure_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, pressure_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.airmap.airmapsdk.models.Telemetry.Barometer)) {
        return super.equals(obj);
      }
      com.airmap.airmapsdk.models.Telemetry.Barometer other = (com.airmap.airmapsdk.models.Telemetry.Barometer) obj;

      boolean result = true;
      result = result && (getTimestamp()
          == other.getTimestamp());
      result = result && (
          java.lang.Float.floatToIntBits(getPressure())
          == java.lang.Float.floatToIntBits(
              other.getPressure()));
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTimestamp());
      hash = (37 * hash) + PRESSURE_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getPressure());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.airmap.airmapsdk.models.Telemetry.Barometer parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Barometer parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Barometer parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Barometer parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Barometer parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Barometer parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Barometer parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Barometer parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Barometer parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.airmap.airmapsdk.models.Telemetry.Barometer parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.airmap.airmapsdk.models.Telemetry.Barometer prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code airmap.telemetry.Barometer}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:airmap.telemetry.Barometer)
        com.airmap.airmapsdk.models.Telemetry.BarometerOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.airmap.airmapsdk.models.Telemetry.internal_static_airmap_telemetry_Barometer_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.airmap.airmapsdk.models.Telemetry.internal_static_airmap_telemetry_Barometer_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.airmap.airmapsdk.models.Telemetry.Barometer.class, com.airmap.airmapsdk.models.Telemetry.Barometer.Builder.class);
      }

      // Construct using com.airmap.airmapsdk.models.Telemetry.Barometer.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        timestamp_ = 0L;

        pressure_ = 0F;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.airmap.airmapsdk.models.Telemetry.internal_static_airmap_telemetry_Barometer_descriptor;
      }

      public com.airmap.airmapsdk.models.Telemetry.Barometer getDefaultInstanceForType() {
        return com.airmap.airmapsdk.models.Telemetry.Barometer.getDefaultInstance();
      }

      public com.airmap.airmapsdk.models.Telemetry.Barometer build() {
        com.airmap.airmapsdk.models.Telemetry.Barometer result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.airmap.airmapsdk.models.Telemetry.Barometer buildPartial() {
        com.airmap.airmapsdk.models.Telemetry.Barometer result = new com.airmap.airmapsdk.models.Telemetry.Barometer(this);
        result.timestamp_ = timestamp_;
        result.pressure_ = pressure_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.airmap.airmapsdk.models.Telemetry.Barometer) {
          return mergeFrom((com.airmap.airmapsdk.models.Telemetry.Barometer)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.airmap.airmapsdk.models.Telemetry.Barometer other) {
        if (other == com.airmap.airmapsdk.models.Telemetry.Barometer.getDefaultInstance()) return this;
        if (other.getTimestamp() != 0L) {
          setTimestamp(other.getTimestamp());
        }
        if (other.getPressure() != 0F) {
          setPressure(other.getPressure());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.airmap.airmapsdk.models.Telemetry.Barometer parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.airmap.airmapsdk.models.Telemetry.Barometer) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private long timestamp_ ;
      /**
       * <pre>
       * UNIX time in Milliseconds
       * </pre>
       *
       * <code>optional uint64 timestamp = 1;</code>
       */
      public long getTimestamp() {
        return timestamp_;
      }
      /**
       * <pre>
       * UNIX time in Milliseconds
       * </pre>
       *
       * <code>optional uint64 timestamp = 1;</code>
       */
      public Builder setTimestamp(long value) {
        
        timestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * UNIX time in Milliseconds
       * </pre>
       *
       * <code>optional uint64 timestamp = 1;</code>
       */
      public Builder clearTimestamp() {
        
        timestamp_ = 0L;
        onChanged();
        return this;
      }

      private float pressure_ ;
      /**
       * <pre>
       * Barometric pressure in hPa
       * </pre>
       *
       * <code>optional float pressure = 2;</code>
       */
      public float getPressure() {
        return pressure_;
      }
      /**
       * <pre>
       * Barometric pressure in hPa
       * </pre>
       *
       * <code>optional float pressure = 2;</code>
       */
      public Builder setPressure(float value) {
        
        pressure_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Barometric pressure in hPa
       * </pre>
       *
       * <code>optional float pressure = 2;</code>
       */
      public Builder clearPressure() {
        
        pressure_ = 0F;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:airmap.telemetry.Barometer)
    }

    // @@protoc_insertion_point(class_scope:airmap.telemetry.Barometer)
    private static final com.airmap.airmapsdk.models.Telemetry.Barometer DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.airmap.airmapsdk.models.Telemetry.Barometer();
    }

    public static com.airmap.airmapsdk.models.Telemetry.Barometer getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Barometer>
        PARSER = new com.google.protobuf.AbstractParser<Barometer>() {
      public Barometer parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Barometer(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Barometer> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Barometer> getParserForType() {
      return PARSER;
    }

    public com.airmap.airmapsdk.models.Telemetry.Barometer getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_airmap_telemetry_Position_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_airmap_telemetry_Position_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_airmap_telemetry_Attitude_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_airmap_telemetry_Attitude_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_airmap_telemetry_Speed_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_airmap_telemetry_Speed_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_airmap_telemetry_Barometer_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_airmap_telemetry_Barometer_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\026assets/telemetry.proto\022\020airmap.telemet" +
      "ry\"\213\001\n\010Position\022\021\n\ttimestamp\030\001 \001(\004\022\020\n\010la" +
      "titude\030\002 \001(\001\022\021\n\tlongitude\030\003 \001(\001\022\024\n\014altit" +
      "ude_agl\030\004 \001(\002\022\024\n\014altitude_msl\030\005 \001(\002\022\033\n\023h" +
      "orizontal_accuracy\030\006 \001(\002\"G\n\010Attitude\022\021\n\t" +
      "timestamp\030\001 \001(\004\022\013\n\003yaw\030\002 \001(\002\022\r\n\005pitch\030\003 " +
      "\001(\002\022\014\n\004roll\030\004 \001(\002\"V\n\005Speed\022\021\n\ttimestamp\030" +
      "\001 \001(\004\022\022\n\nvelocity_x\030\002 \001(\002\022\022\n\nvelocity_y\030" +
      "\003 \001(\002\022\022\n\nvelocity_z\030\004 \001(\002\"0\n\tBarometer\022\021" +
      "\n\ttimestamp\030\001 \001(\004\022\020\n\010pressure\030\002 \001(\002B\035\n\033c",
      "om.airmap.airmapsdk.modelsb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_airmap_telemetry_Position_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_airmap_telemetry_Position_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_airmap_telemetry_Position_descriptor,
        new java.lang.String[] { "Timestamp", "Latitude", "Longitude", "AltitudeAgl", "AltitudeMsl", "HorizontalAccuracy", });
    internal_static_airmap_telemetry_Attitude_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_airmap_telemetry_Attitude_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_airmap_telemetry_Attitude_descriptor,
        new java.lang.String[] { "Timestamp", "Yaw", "Pitch", "Roll", });
    internal_static_airmap_telemetry_Speed_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_airmap_telemetry_Speed_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_airmap_telemetry_Speed_descriptor,
        new java.lang.String[] { "Timestamp", "VelocityX", "VelocityY", "VelocityZ", });
    internal_static_airmap_telemetry_Barometer_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_airmap_telemetry_Barometer_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_airmap_telemetry_Barometer_descriptor,
        new java.lang.String[] { "Timestamp", "Pressure", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
